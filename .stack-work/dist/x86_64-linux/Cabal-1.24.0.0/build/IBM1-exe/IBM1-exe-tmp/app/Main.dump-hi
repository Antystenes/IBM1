
==================== FINAL INTERFACE ====================
2016-12-13 22:28:12.032626722 UTC

interface main@main:Main [hpc] 8001
  interface hash: 2d0c0ca69e325cc641a0c0b02ee3d8de
  ABI hash: e986d88264543e5f3fa37610d210458d
  export-list hash: 8bc2100ee74ccaff4e739c0b9cfd577a
  orphan hash: 076fb44b8170c84ce834b115f5e0fff4
  flag hash: d4d59b0a1c14356ad0f3149a8b318874
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: IBM1-0.1.0.0@IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0*
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      hashable-1.2.4.0@hashable-1.2.4.0-GnltDttmBjG9qGzcjuPOH4
                      integer-gmp-1.0.0.1
                      text-1.2.2.1@text-1.2.2.1-FgcR4Xf0VlEHD9HLxzq9WJ
                      unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-6Q3w38ZivLTB9nLFgf8RUI
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.4.0@hashable-1.2.4.0-GnltDttmBjG9qGzcjuPOH4:Data.Hashable.Generic
         text-1.2.2.1@text-1.2.2.1-FgcR4Xf0VlEHD9HLxzq9WJ:Data.Text
         text-1.2.2.1@text-1.2.2.1-FgcR4Xf0VlEHD9HLxzq9WJ:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-FgcR4Xf0VlEHD9HLxzq9WJ:Data.Text.Show
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-FgcR4Xf0VlEHD9HLxzq9WJ:Data.Text
                         text-1.2.2.1@text-1.2.2.1-FgcR4Xf0VlEHD9HLxzq9WJ:Data.Text.Lazy
                         unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-6Q3w38ZivLTB9nLFgf8RUI:Data.HashMap.Base
import  -/  IBM1-0.1.0.0@IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib ffb1faff636c355f96d3300dda333453
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.IO eb1d40aa793a4047069a5023f2ebcfe3
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
55172723c98440dfef404bfec0a5dfe9
  $s$fShow(,) :: GHC.Show.Show ([GHC.Types.Char], [GHC.Types.Char])
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ([GHC.Types.Char], [GHC.Types.Char])
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ [GHC.Types.Char]
                     Main.$s$fShow(,)1
                     Main.$s$fShow(,)1)
                  Main.$s$fShow(,)_$s$fShow(,)_$cshow
                  Main.$s$fShow(,)_$s$fShow(,)_$cshowList -}
133383af3fb283d6777138ae8d3f104f
  $s$fShow(,)1 :: GHC.Show.Show [GHC.Types.Char]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Show.$fShow[]_$s$fShow[]1 -}
089da60668a40aa0693857c6d1532588
  $s$fShow(,)_$s$fShow(,)_$cshow ::
    ([GHC.Types.Char], [GHC.Types.Char]) -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: ([GHC.Types.Char], [GHC.Types.Char])) ->
                 GHC.Show.$fShow(,)_$cshowsPrec
                   @ [GHC.Types.Char]
                   @ [GHC.Types.Char]
                   Main.$s$fShow(,)1
                   Main.$s$fShow(,)1
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f352d004efa038d45c539e22cc4f6724
  $s$fShow(,)_$s$fShow(,)_$cshowList ::
    [([GHC.Types.Char], [GHC.Types.Char])] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [([GHC.Types.Char], [GHC.Types.Char])])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ ([GHC.Types.Char], [GHC.Types.Char])
                   (GHC.Show.$fShow(,)_$cshowsPrec
                      @ [GHC.Types.Char]
                      @ [GHC.Types.Char]
                      Main.$s$fShow(,)1
                      Main.$s$fShow(,)1
                      GHC.Show.shows22)
                   eta
                   eta1) -}
615a0d236abf7419bdbfb6e5a33d6163
  $s$fShowHashMap1 :: GHC.Show.Show (Lib.Token, Lib.Token)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Main.$s$fShow(,) -}
d53c32ac1d6037b1dc8b691c1a2a8dfd
  $s$fShowHashMap_$s$fShowHashMap_$cshow ::
    Data.HashMap.Base.HashMap (Lib.Token, Lib.Token) GHC.Types.Float
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.HashMap.Base.HashMap
                           (Lib.Token, Lib.Token) GHC.Types.Float) ->
                 Data.HashMap.Base.$fShowHashMap_$cshowsPrec
                   @ (Lib.Token, Lib.Token)
                   @ GHC.Types.Float
                   Main.$s$fShowHashMap1
                   GHC.Float.$fShowFloat
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
859eb3daa94966c2072f6fa99f24474d
  main :: GHC.Types.IO ()
  {- Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
8127d4863b7ab926d80f1c0783742b35
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Unfolding: ({__scc {main@main:Main.main} True False} \ (eta :: GHC.Prim.State#
                                                                      GHC.Prim.RealWorld)[OneShot] ->
                                                          {__scc {main@main:Main.main} False True} GHC.IO.Handle.Text.hPutStr2
                                                                                                     GHC.IO.Handle.FD.stdout
                                                                                                     Main.main2
                                                                                                     GHC.Types.True
                                                                                                     eta) -}
cfcf1e7bad55922ac2bb31241e396d4a
  main2 :: GHC.Base.String
  {- Unfolding: ({__scc {main@main:Main.main} False True} Main.$s$fShowHashMap_$s$fShowHashMap_$cshow
                                                            Main.main3) -}
3e1b2a0cb1a3eaefe98d61c6c1e8b61e
  main3 :: Lib.Probs
  {- Unfolding: ({__scc {main@main:Main.main} False True} {__scc {IBM1-0.1.0.0@IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.iterateTest} True False} {__scc {IBM1-0.1.0.0@IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.iterateTest} False True} Lib.$wgo1
                                                                                                                                                                                                                                      Lib.testloop
                                                                                                                                                                                                                                      10000#
                                                                                                                                                                                                                                      Lib.testProbs) -}
7778025e057985ac07044f5c806af867
  main4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
"SPEC/Main $fShow(,) @ [Char] @ [Char]" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                     [GHC.Types.Char])
                                                        ($dShow1 :: GHC.Show.Show [GHC.Types.Char])
  GHC.Show.$fShow(,) @ [GHC.Types.Char]
                     @ [GHC.Types.Char]
                     $dShow
                     $dShow1
  = Main.$s$fShow(,)
"SPEC/Main $fShow(,)_$cshow @ [Char] @ [Char]" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                            [GHC.Types.Char])
                                                               ($dShow1 :: GHC.Show.Show
                                                                             [GHC.Types.Char])
  GHC.Show.$fShow(,)_$cshow @ [GHC.Types.Char]
                            @ [GHC.Types.Char]
                            $dShow
                            $dShow1
  = Main.$s$fShow(,)_$s$fShow(,)_$cshow
"SPEC/Main $fShow(,)_$cshowList @ [Char] @ [Char]" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                                [GHC.Types.Char])
                                                                   ($dShow1 :: GHC.Show.Show
                                                                                 [GHC.Types.Char])
  GHC.Show.$fShow(,)_$cshowList @ [GHC.Types.Char]
                                @ [GHC.Types.Char]
                                $dShow
                                $dShow1
  = Main.$s$fShow(,)_$s$fShow(,)_$cshowList
"SPEC/Main $fShowHashMap_$cshow @ (Token, Token) @ Float" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                                       (Lib.Token,
                                                                                        Lib.Token))
                                                                          ($dShow1 :: GHC.Show.Show
                                                                                        GHC.Types.Float)
  Data.HashMap.Base.$fShowHashMap_$cshow @ (Lib.Token, Lib.Token)
                                         @ GHC.Types.Float
                                         $dShow
                                         $dShow1
  = Main.$s$fShowHashMap_$s$fShowHashMap_$cshow
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

