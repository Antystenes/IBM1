
==================== FINAL INTERFACE ====================
2016-12-13 22:25:36.499153703 UTC

interface IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib [hpc] 8001
  interface hash: da2ac8450ccc2878a15430f600b57aac
  ABI hash: ffb1faff636c355f96d3300dda333453
  export-list hash: f3d54bae55f12c9a759ca0be82dfcb4e
  orphan hash: cd9669fa987730cf155e1fc2c6e9d7f3
  flag hash: d78d143f8e9dfd7c5d3c2433ddf8bae5
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.extractDict
  Lib.foldPair
  Lib.initProbs
  Lib.iterateTest
  Lib.loop
  Lib.step
  Lib.testCorpus
  Lib.testProbs
  Lib.testloop
  Lib.Corpus
  Lib.Counts
  Lib.Dictionary
  Lib.Probs
  Lib.Sentence
  Lib.SentencePair
  Lib.Token
  Lib.Totals
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0*
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      hashable-1.2.4.0@hashable-1.2.4.0-GnltDttmBjG9qGzcjuPOH4
                      integer-gmp-1.0.0.1
                      text-1.2.2.1@text-1.2.2.1-FgcR4Xf0VlEHD9HLxzq9WJ
                      unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-6Q3w38ZivLTB9nLFgf8RUI*
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.4.0@hashable-1.2.4.0-GnltDttmBjG9qGzcjuPOH4:Data.Hashable.Generic
         text-1.2.2.1@text-1.2.2.1-FgcR4Xf0VlEHD9HLxzq9WJ:Data.Text
         text-1.2.2.1@text-1.2.2.1-FgcR4Xf0VlEHD9HLxzq9WJ:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-FgcR4Xf0VlEHD9HLxzq9WJ:Data.Text.Show
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-FgcR4Xf0VlEHD9HLxzq9WJ:Data.Text
                         text-1.2.2.1@text-1.2.2.1-FgcR4Xf0VlEHD9HLxzq9WJ:Data.Text.Lazy
                         unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-6Q3w38ZivLTB9nLFgf8RUI:Data.HashMap.Base
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:Data.Tuple acb0ed10307ed88df6c81b8589f4de16
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Set 3ed2324fd1e757464a8ac2b636a64e5a
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base 7491ab24d955eec25fba8e0d89b657f1
import  -/  unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-6Q3w38ZivLTB9nLFgf8RUI:Data.HashMap.Base c9bd141fd83602caf27922d7f061954a
import  -/  unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-6Q3w38ZivLTB9nLFgf8RUI:Data.HashMap.Strict 2b5a209fc976ddaca072f43bf343fbdd
cf4f6a0c7a6962b0f3a3731452ccf286
  $s!1 :: v
  {- Strictness: x -}
b7e5a71ee684a6339b64e9249a86a348
  $s!_$s$fEq(,) :: GHC.Classes.Eq (Lib.Token, Lib.Token)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Lib.Token, Lib.Token)
                  (GHC.Classes.$fEq(,)_$c==
                     @ Lib.Token
                     @ Lib.Token
                     GHC.Classes.$fEq[]_$s$fEq[]1
                     GHC.Classes.$fEq[]_$s$fEq[]1)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ Lib.Token
                     @ Lib.Token
                     GHC.Classes.$fEq[]_$s$fEq[]1
                     GHC.Classes.$fEq[]_$s$fEq[]1) -}
6a11ba0aeec0e98caefc406ed9492c77
  $s!_$s$fHashable(,) ::
    Data.Hashable.Class.Hashable (Lib.Token, Lib.Token)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Lib.Token, Lib.Token)
                  Lib.$s!_$s$fHashable(,)_$chashWithSalt
                  Lib.$s!_$s$fHashable(,)_$chash -}
edd0702c6fc35684eed5f67aca01b8dc
  $s!_$s$fHashable(,)_$chash ::
    (Lib.Token, Lib.Token) -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*U,1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (Lib.Token, Lib.Token)) ->
                 case ds of wild { (,) a4 a5 ->
                 Data.Hashable.Class.$fHashableNonEmpty_$s$chashWithSalt
                   (Data.Hashable.Class.$fHashable[]_$s$chash a4)
                   a5 }) -}
b2ce85b89b95145821ab9288353581a3
  $s!_$s$fHashable(,)_$chashWithSalt ::
    GHC.Types.Int -> (Lib.Token, Lib.Token) -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(SS),1*U(1*U,1*U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (s :: GHC.Types.Int) (ds :: (Lib.Token, Lib.Token)) ->
                 case ds of wild { (,) a4 a5 ->
                 Data.Hashable.Class.$fHashableNonEmpty_$s$chashWithSalt
                   (Data.Hashable.Class.$fHashableNonEmpty_$s$chashWithSalt s a4)
                   a5 }) -}
196de23edbaed73659845d7a7f83a6aa
  $s!_$slookup ::
    [GHC.Types.Char]
    -> Data.HashMap.Base.HashMap [GHC.Types.Char] v -> GHC.Base.Maybe v
  {- Arity: 2, Strictness: <S,U><S,1*U>,
     Unfolding: (\ @ v
                   (k0 :: [GHC.Types.Char])
                   (m0 :: Data.HashMap.Base.HashMap [GHC.Types.Char] v) ->
                 {__scc {unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-6Q3w38ZivLTB9nLFgf8RUI:Data.HashMap.Base.hash} True False} case {__scc {unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-6Q3w38ZivLTB9nLFgf8RUI:Data.HashMap.Base.hash} False True} Data.Hashable.Class.$wgo
                                                                                                                                                                                                                                                                                  k0
                                                                                                                                                                                                                                                                                  -2578643520546668380#
                                                                                                                                                                                                                                                                                  0# of ww2 { (#,#) ww3 ww4 ->
                                                                                                                                              Lib.$wpoly_go1
                                                                                                                                                @ v
                                                                                                                                                ({__scc {unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-6Q3w38ZivLTB9nLFgf8RUI:Data.HashMap.Base.hash} False True} GHC.Prim.int2Word#
                                                                                                                                                                                                                                                                                (GHC.Prim.xorI#
                                                                                                                                                                                                                                                                                   (GHC.Prim.*#
                                                                                                                                                                                                                                                                                      ww3
                                                                                                                                                                                                                                                                                      16777619#)
                                                                                                                                                                                                                                                                                   ww4))
                                                                                                                                                k0
                                                                                                                                                0#
                                                                                                                                                m0 }) -}
c890330876cfa1c9c1b54e03e682bd38
  $s$wupdateOrSnocWithKey ::
    ([GHC.Types.Char] -> v -> v -> v)
    -> [GHC.Types.Char]
    -> v
    -> GHC.Prim.Array# (Data.HashMap.Base.Leaf [GHC.Types.Char] v)
    -> GHC.Prim.Array# (Data.HashMap.Base.Leaf [GHC.Types.Char] v)
  {- Arity: 4, Strictness: <L,C(C1(C1(U)))><S,1*U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ v
                   (w1 :: [GHC.Types.Char] -> v -> v -> v)
                   (w2 :: [GHC.Types.Char])
                   (w3 :: v)
                   (ww :: GHC.Prim.Array#
                            (Data.HashMap.Base.Leaf [GHC.Types.Char] v)) ->
                 letrec {
                   $wgo2 :: [GHC.Types.Char]
                            -> v
                            -> GHC.Prim.Array# (Data.HashMap.Base.Leaf [GHC.Types.Char] v)
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Array# (Data.HashMap.Base.Leaf [GHC.Types.Char] v)
                     {- Arity: 5, Strictness: <S,1*U><L,U><S,U><S,U><S,U>,
                        Inline: [0] -}
                   = \ (w :: [GHC.Types.Char])
                       (w4 :: v)
                       (ww1 :: GHC.Prim.Array#
                                 (Data.HashMap.Base.Leaf [GHC.Types.Char] v))
                       (ww2 :: GHC.Prim.Int#)
                       (ww3 :: GHC.Prim.Int#) ->
                     case w of k2 { DEFAULT ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww2 ww3) of wild {
                       GHC.Types.False
                       -> case GHC.Prim.indexArray#
                                 @ (Data.HashMap.Base.Leaf [GHC.Types.Char] v)
                                 ww1
                                 ww2 of ds { Unit# ipv3 ->
                          case ipv3 of wild1 { Data.HashMap.Base.L kx y ->
                          case GHC.Base.eqString k2 kx of wild2 {
                            GHC.Types.False -> $wgo2 k2 w4 ww1 (GHC.Prim.+# ww2 1#) ww3
                            GHC.Types.True
                            -> case w1 k2 w4 y of v' { DEFAULT ->
                               case GHC.Prim.thawArray#
                                      @ (Data.HashMap.Base.Leaf [GHC.Types.Char] v)
                                      @ GHC.Prim.RealWorld
                                      ww1
                                      0#
                                      (GHC.Prim.sizeofArray#
                                         @ (Data.HashMap.Base.Leaf [GHC.Types.Char] v)
                                         ww1)
                                      GHC.Prim.realWorld# of ds1 { (#,#) ipv4 ipv5 ->
                               case GHC.Prim.writeArray#
                                      @ GHC.Prim.RealWorld
                                      @ (Data.HashMap.Base.Leaf [GHC.Types.Char] v)
                                      ipv5
                                      ww2
                                      (Data.HashMap.Base.L @ [GHC.Types.Char] @ v k2 v')
                                      ipv4 of s' { DEFAULT ->
                               case GHC.Prim.unsafeFreezeArray#
                                      @ GHC.Prim.RealWorld
                                      @ (Data.HashMap.Base.Leaf [GHC.Types.Char] v)
                                      ipv5
                                      s' of ds2 { (#,#) ipv6 ipv7 ->
                               ipv7 } } } } } } }
                       GHC.Types.True
                       -> let {
                            n2 :: GHC.Prim.Int# = GHC.Prim.+# ww3 1#
                          } in
                          {__scc {unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-6Q3w38ZivLTB9nLFgf8RUI:Data.HashMap.Array.new_} True False} case {__scc {unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-6Q3w38ZivLTB9nLFgf8RUI:Data.HashMap.Array.new_} False True} GHC.Prim.newArray#
                                                                                                                                                                                                                                                                                             @ (Data.HashMap.Base.Leaf
                                                                                                                                                                                                                                                                                                  [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                  v)
                                                                                                                                                                                                                                                                                             @ GHC.Prim.RealWorld
                                                                                                                                                                                                                                                                                             n2
                                                                                                                                                                                                                                                                                             (Data.HashMap.Array.undefinedElem
                                                                                                                                                                                                                                                                                                @ (Data.HashMap.Base.Leaf
                                                                                                                                                                                                                                                                                                     [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                     v))
                                                                                                                                                                                                                                                                                             GHC.Prim.realWorld# of ds { (#,#) ipv3 ipv4 ->
                                                                                                                                                        case w4 of v2 { DEFAULT ->
                                                                                                                                                        case {__scc {unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-6Q3w38ZivLTB9nLFgf8RUI:Data.HashMap.Array.new_} False True} Data.HashMap.Array.$WMArray
                                                                                                                                                                                                                                                                                             @ GHC.Prim.RealWorld
                                                                                                                                                                                                                                                                                             @ (Data.HashMap.Base.Leaf
                                                                                                                                                                                                                                                                                                  [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                  v)
                                                                                                                                                                                                                                                                                             ipv4 of ww4 { Data.HashMap.Array.MArray ww5 ->
                                                                                                                                                        {__scc {unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-6Q3w38ZivLTB9nLFgf8RUI:Data.HashMap.Array.copy} True False} case {__scc {unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-6Q3w38ZivLTB9nLFgf8RUI:Data.HashMap.Array.copy} False True} GHC.Prim.copyArray#
                                                                                                                                                                                                                                                                                                                                                                                                                           @ (Data.HashMap.Base.Leaf
                                                                                                                                                                                                                                                                                                                                                                                                                                [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                                                                                                                                                v)
                                                                                                                                                                                                                                                                                                                                                                                                                           @ GHC.Prim.RealWorld
                                                                                                                                                                                                                                                                                                                                                                                                                           ww1
                                                                                                                                                                                                                                                                                                                                                                                                                           0#
                                                                                                                                                                                                                                                                                                                                                                                                                           ww5
                                                                                                                                                                                                                                                                                                                                                                                                                           0#
                                                                                                                                                                                                                                                                                                                                                                                                                           ww3
                                                                                                                                                                                                                                                                                                                                                                                                                           ipv3 of s2 { DEFAULT ->
                                                                                                                                                                                                                                                                                      case GHC.Prim.writeArray#
                                                                                                                                                                                                                                                                                             @ GHC.Prim.RealWorld
                                                                                                                                                                                                                                                                                             @ (Data.HashMap.Base.Leaf
                                                                                                                                                                                                                                                                                                  [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                  v)
                                                                                                                                                                                                                                                                                             ww5
                                                                                                                                                                                                                                                                                             ww3
                                                                                                                                                                                                                                                                                             (Data.HashMap.Base.L
                                                                                                                                                                                                                                                                                                @ [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                @ v
                                                                                                                                                                                                                                                                                                k2
                                                                                                                                                                                                                                                                                                v2)
                                                                                                                                                                                                                                                                                             s2 of s' { DEFAULT ->
                                                                                                                                                                                                                                                                                      case GHC.Prim.unsafeFreezeArray#
                                                                                                                                                                                                                                                                                             @ GHC.Prim.RealWorld
                                                                                                                                                                                                                                                                                             @ (Data.HashMap.Base.Leaf
                                                                                                                                                                                                                                                                                                  [GHC.Types.Char]
                                                                                                                                                                                                                                                                                                  v)
                                                                                                                                                                                                                                                                                             ww5
                                                                                                                                                                                                                                                                                             s' of ds3 { (#,#) ipv8 ipv9 ->
                                                                                                                                                                                                                                                                                      ipv9 } } } } } } } }
                 } in
                 $wgo2
                   w2
                   w3
                   ww
                   0#
                   (GHC.Prim.sizeofArray#
                      @ (Data.HashMap.Base.Leaf [GHC.Types.Char] v)
                      ww)) -}
08b62c93734ccf1bca0d2808a8ce8ed1
  $sinsertWith ::
    (v -> v -> v)
    -> [GHC.Types.Char]
    -> v
    -> Data.HashMap.Base.HashMap [GHC.Types.Char] v
    -> Data.HashMap.Base.HashMap [GHC.Types.Char] v
  {- Arity: 4, Strictness: <L,C(C1(U))><S,U><L,U><S,1*U> -}
46b7e347a2eac4f7cd965a84f35946a3
  $sinsert_$sgo5 ::
    Lib.Token
    -> Data.Set.Base.Set Lib.Token -> Data.Set.Base.Set Lib.Token
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
c966bc15011a3563eea45681fd8d3aa3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Lib.$trModule2 Lib.$trModule1) -}
77b4e4253f0e0da043ae164a88db6c07
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Lib"#) -}
a9092536f7d6e5f2cd69d94e05f162cb
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81"#) -}
2b949a3e0e59750d08a246d8d8888181
  $w$sinsertWith ::
    (v -> v -> v)
    -> [GHC.Types.Char]
    -> [GHC.Types.Char]
    -> v
    -> Data.HashMap.Base.HashMap ([GHC.Types.Char], [GHC.Types.Char]) v
    -> Data.HashMap.Base.HashMap ([GHC.Types.Char], [GHC.Types.Char]) v
  {- Arity: 5, Strictness: <L,C(C1(U))><S,U><S,U><L,U><S,1*U>,
     Inline: [0] -}
9a8fe03c47b25334ac197dbb7af022f8
  $wfoldPair ::
    (Lib.SentencePair -> Lib.Token -> Lib.Token -> a -> a)
    -> a -> Lib.Sentence -> Lib.Sentence -> a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(C1(C1(U))))><L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ @ a
                   (w :: Lib.SentencePair -> Lib.Token -> Lib.Token -> a -> a)
                   (w1 :: a)
                   (ww :: Lib.Sentence)
                   (ww1 :: Lib.Sentence) ->
                 {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.foldPair} True True} let {
                                                                                       wild :: Lib.SentencePair
                                                                                       = (ww, ww1)
                                                                                     } in
                                                                                     letrec {
                                                                                       go :: [Lib.Token]
                                                                                             -> a
                                                                                         {- Arity: 1,
                                                                                            Strictness: <S,1*U> -}
                                                                                       = \ (ds :: [Lib.Token]) ->
                                                                                         case ds of wild1 {
                                                                                           [] -> w1
                                                                                           : y ys
                                                                                           -> let {
                                                                                                acc :: a
                                                                                                = go
                                                                                                    ys
                                                                                              } in
                                                                                              {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.foldPair.\} True True} letrec {
                                                                                                                                                                      go1 :: [Lib.Token]
                                                                                                                                                                             -> a
                                                                                                                                                                        {- Arity: 1,
                                                                                                                                                                           Strictness: <S,1*U> -}
                                                                                                                                                                      = \ (ds1 :: [Lib.Token]) ->
                                                                                                                                                                        case ds1 of wild2 {
                                                                                                                                                                          []
                                                                                                                                                                          -> acc
                                                                                                                                                                          : y1 ys1
                                                                                                                                                                          -> let {
                                                                                                                                                                               ac :: a
                                                                                                                                                                               = go1
                                                                                                                                                                                   ys1
                                                                                                                                                                             } in
                                                                                                                                                                             {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.foldPair.\.\} True True} w wild
                                                                                                                                                                                                                                                       y
                                                                                                                                                                                                                                                       y1
                                                                                                                                                                                                                                                       ac }
                                                                                                                                                                    } in
                                                                                                                                                                    go1
                                                                                                                                                                      ww }
                                                                                     } in
                                                                                     go ww1) -}
f07ba5a2d9ff3f31c7e249b725887115
  $wgo ::
    [([Lib.Token], [Lib.Token])]
    -> (# Data.Set.Base.Set Lib.Token, Data.Set.Base.Set Lib.Token #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
209cff1e7c8b678b364d794e80b1792e
  $wgo1 ::
    [Lib.Probs -> Lib.Probs] -> GHC.Prim.Int# -> Lib.Probs -> Lib.Probs
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,1*U><L,U>,
     Inline: [0] -}
bf819a9e73a1227314341135e036d9b9
  $witerateTest :: GHC.Prim.Int# -> Lib.Probs -> Lib.Probs
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.iterateTest} True True} case GHC.Prim.tagToEnum#
                                                                                               @ GHC.Types.Bool
                                                                                               (GHC.Prim.<#
                                                                                                  0#
                                                                                                  ww) of wild {
                                                                                          GHC.Types.False
                                                                                          -> GHC.Base.id
                                                                                               @ Lib.Probs
                                                                                          GHC.Types.True
                                                                                          -> \ (w :: Lib.Probs) ->
                                                                                             Lib.$wgo1
                                                                                               Lib.testloop
                                                                                               ww
                                                                                               w }) -}
79256339d83cc06e6950b1feb73b746d
  $wloop ::
    Lib.Corpus
    -> (# Lib.Probs -> Lib.Probs, [Lib.Probs -> Lib.Probs] #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
1ae96f35465f5a89a5612248c062a3c0
  $wpoly_go1 ::
    GHC.Prim.Word#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap [GHC.Types.Char] v
    -> GHC.Base.Maybe v
  {- Arity: 4, Strictness: <L,U><S,1*U><L,U><S,1*U>, Inline: [0] -}
d990eff46a4fd02ec61dce4a331ae81c
  $wpoly_go2 ::
    [GHC.Types.Char]
    -> GHC.Prim.Array# (Data.HashMap.Base.Leaf [GHC.Types.Char] v)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Base.Maybe v
  {- Arity: 4, HasNoCafRefs, Strictness: <S,1*U><S,U><S,U><S,U>,
     Inline: [0] -}
b6f3f8da62d015358799da1bf84e3f21
  type Corpus = [Lib.SentencePair]
a78100fd115fb84d8a59b54fc8cd9365
  type Counts =
    Data.HashMap.Base.HashMap (Lib.Token, Lib.Token) GHC.Types.Float
3d09e4cd5dec93b953e3d02eb89e7aa9
  type Dictionary = Data.Set.Base.Set Lib.Token
675ed5b7864ebef8a1e384d9b79242ed
  type Probs =
    Data.HashMap.Base.HashMap (Lib.Token, Lib.Token) GHC.Types.Float
3006f8cb6dc3c19341720eab4ee7ea67
  type Sentence = [Lib.Token]
9e731c18f684b51223e6968c6c1a1eb0
  type SentencePair = (Lib.Sentence, Lib.Sentence)
adec4015774dc9a8b84f32a1c34321f0
  type Token = GHC.Base.String
a920cd8709ffd8bfc1698b2a37701f4f
  type Totals = Data.HashMap.Base.HashMap Lib.Token GHC.Types.Float
7033ba4bdc1550320bf41592dcc7d44f
  extractDict :: Lib.Corpus -> (Lib.Dictionary, Lib.Dictionary)
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.extractDict} True False} \ (eta :: [([Lib.Token],
                                                                                                     [Lib.Token])]) ->
                                                                                         {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.extractDict} False True} case Lib.$wgo
                                                                                                                                                                        eta of ww { (#,#) ww1 ww2 ->
                                                                                                                                                                 (ww1,
                                                                                                                                                                  ww2) }) -}
2521441940d17fdbcfe12c4af0a7bbb3
  foldPair ::
    (Lib.SentencePair -> Lib.Token -> Lib.Token -> a -> a)
    -> a -> Lib.SentencePair -> a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(C1(C1(U))))><L,U><S(LS),1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: Lib.SentencePair -> Lib.Token -> Lib.Token -> a -> a)
                   (w1 :: a)
                   (w2 :: Lib.SentencePair) ->
                 case w2 of ww { (,) ww1 ww2 ->
                 Lib.$wfoldPair @ a w w1 ww1 ww2 }) -}
1d49dfa63c3c657a79411d33aa662a7b
  initProbs :: Lib.Corpus -> Lib.Probs
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (corpus :: Lib.Corpus) ->
                 {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.initProbs} True True} let {
                                                                                        k :: Data.HashMap.Base.HashMap
                                                                                               (Lib.Token,
                                                                                                Lib.Token)
                                                                                               GHC.Types.Float
                                                                                             -> Lib.SentencePair
                                                                                             -> Data.HashMap.Base.HashMap
                                                                                                  (Lib.Token,
                                                                                                   Lib.Token)
                                                                                                  GHC.Types.Float
                                                                                        = let {
                                                                                            probs :: GHC.Types.Float
                                                                                            = {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.initProbs.probs} True True} case ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.initProbs} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.initProbs.probs} False True} GHC.Float.RealFracMethods.int2Float)
                                                                                                                                                                                (({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.initProbs} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.initProbs.probs} False True} Lib.initProbs1)
                                                                                                                                                                                   corpus) of wild1 { GHC.Types.F# y ->
                                                                                                                                                                         case GHC.Prim.divideFloat#
                                                                                                                                                                                1.0#
                                                                                                                                                                                y of wild2 { DEFAULT ->
                                                                                                                                                                         GHC.Types.F#
                                                                                                                                                                           wild2 } }
                                                                                          } in
                                                                                          {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.initProbs.initializer} True True} let {
                                                                                                                                                                             w :: Lib.SentencePair
                                                                                                                                                                                  -> Lib.Token
                                                                                                                                                                                  -> Lib.Token
                                                                                                                                                                                  -> Data.HashMap.Base.HashMap
                                                                                                                                                                                       (Lib.Token,
                                                                                                                                                                                        Lib.Token)
                                                                                                                                                                                       GHC.Types.Float
                                                                                                                                                                                  -> Data.HashMap.Base.HashMap
                                                                                                                                                                                       (Lib.Token,
                                                                                                                                                                                        Lib.Token)
                                                                                                                                                                                       GHC.Types.Float
                                                                                                                                                                               {- Arity: 4 -}
                                                                                                                                                                             = \ (ds :: Lib.SentencePair)
                                                                                                                                                                                 (e :: Lib.Token)[OneShot]
                                                                                                                                                                                 (f :: Lib.Token)[OneShot]
                                                                                                                                                                                 (ac :: Data.HashMap.Base.HashMap
                                                                                                                                                                                          (Lib.Token,
                                                                                                                                                                                           Lib.Token)
                                                                                                                                                                                          GHC.Types.Float)[OneShot] ->
                                                                                                                                                                               {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.initProbs.insertProbs} True True} case probs of v2 { GHC.Types.F# ipv ->
                                                                                                                                                                                                                                                                Data.HashMap.Base.insert
                                                                                                                                                                                                                                                                  @ (Lib.Token,
                                                                                                                                                                                                                                                                     Lib.Token)
                                                                                                                                                                                                                                                                  @ GHC.Types.Float
                                                                                                                                                                                                                                                                  Lib.$s!_$s$fEq(,)
                                                                                                                                                                                                                                                                  Lib.$s!_$s$fHashable(,)
                                                                                                                                                                                                                                                                  (e,
                                                                                                                                                                                                                                                                   f)
                                                                                                                                                                                                                                                                  v2
                                                                                                                                                                                                                                                                  ac }
                                                                                                                                                                           } in
                                                                                                                                                                           \ (w1 :: Data.HashMap.Base.HashMap
                                                                                                                                                                                      (Lib.Token,
                                                                                                                                                                                       Lib.Token)
                                                                                                                                                                                      GHC.Types.Float)
                                                                                                                                                                             (w2 :: Lib.SentencePair) ->
                                                                                                                                                                           case w2 of ww { (,) ww1 ww2 ->
                                                                                                                                                                           Lib.$wfoldPair
                                                                                                                                                                             @ (Data.HashMap.Base.HashMap
                                                                                                                                                                                  (Lib.Token,
                                                                                                                                                                                   Lib.Token)
                                                                                                                                                                                  GHC.Types.Float)
                                                                                                                                                                             w
                                                                                                                                                                             w1
                                                                                                                                                                             ww1
                                                                                                                                                                             ww2 }
                                                                                      } in
                                                                                      letrec {
                                                                                        go :: [Lib.SentencePair]
                                                                                              -> Data.HashMap.Base.HashMap
                                                                                                   (Lib.Token,
                                                                                                    Lib.Token)
                                                                                                   GHC.Types.Float
                                                                                              -> Data.HashMap.Base.HashMap
                                                                                                   (Lib.Token,
                                                                                                    Lib.Token)
                                                                                                   GHC.Types.Float
                                                                                          {- Arity: 2,
                                                                                             Strictness: <S,1*U><L,U> -}
                                                                                        = \ (ds :: [Lib.SentencePair])
                                                                                            (eta :: Data.HashMap.Base.HashMap
                                                                                                      (Lib.Token,
                                                                                                       Lib.Token)
                                                                                                      GHC.Types.Float) ->
                                                                                          case ds of wild {
                                                                                            []
                                                                                            -> eta
                                                                                            : y ys
                                                                                            -> go
                                                                                                 ys
                                                                                                 (k eta
                                                                                                    y) }
                                                                                      } in
                                                                                      go
                                                                                        corpus
                                                                                        (Data.HashMap.Base.empty
                                                                                           @ (Lib.Token,
                                                                                              Lib.Token)
                                                                                           @ GHC.Types.Float)) -}
d1fa87dcc67ed97a23b24790edf9d9fd
  initProbs1 :: Lib.Corpus -> GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Lib.Corpus) ->
                 case ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.initProbs} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.initProbs.probs} False True} Lib.initProbs2)
                        x of wild {
                   Data.Set.Base.Bin dt ds1 ds2 ds3 -> GHC.Types.I# dt
                   Data.Set.Base.Tip -> GHC.Types.I# 0# }) -}
692d9dadf5ace6abdebea59b5e349d5c
  initProbs2 :: Lib.Corpus -> Lib.Dictionary
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Lib.Corpus) ->
                 case ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.initProbs} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.initProbs.probs} False True} Lib.extractDict)
                        x of wild { (,) ds1 y ->
                 y }) -}
95001230d5d203d8584969f4e2473694
  iterateTest :: GHC.Types.Int -> Lib.Probs -> Lib.Probs
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Lib.$witerateTest ww1 }) -}
f94499fa18e01710515b183ee77b0208
  loop :: Lib.Corpus -> [Lib.Probs -> Lib.Probs]
  {- Arity: 1, Strictness: <L,U>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Lib.Corpus) ->
                 case Lib.$wloop w of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ (Lib.Probs -> Lib.Probs) ww1 ww2 }) -}
b089fb7e0d6da123facd6a89b2c2c19a
  step :: Lib.Corpus -> Lib.Probs -> Lib.Probs
  {- Arity: 2, Strictness: <L,1*U><S,U> -}
dacebb27dbd61fdfe92dd958cfe5d5d5
  testCorpus :: Lib.Corpus
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} True False} GHC.Types.:
                                                                                          @ ([GHC.Base.String],
                                                                                             [GHC.Base.String])
                                                                                          Lib.testCorpus37
                                                                                          Lib.testCorpus1) -}
4ce6089caa6713751b804613c8896368
  testCorpus1 :: [([GHC.Base.String], [GHC.Base.String])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Base.String], [GHC.Base.String])
                   Lib.testCorpus34
                   Lib.testCorpus2) -}
4aa985a70a408862cd0d02bc59f827af
  testCorpus10 :: ([GHC.Base.String], [GHC.Base.String])
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus.\} True False} (Lib.testCorpus12,
                                                                                                                                                                  Lib.testCorpus11)) -}
8d5f64fd4167198e4e18587b86d348c7
  testCorpus11 :: [GHC.Base.String]
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus.\} False True} Data.OldList.words
                                                                                                                                                                   Lib.testCorpus_e) -}
8cad471a104ef774364a077d3e0cd28e
  testCorpus12 :: [GHC.Base.String]
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus.\} False True} Data.OldList.words
                                                                                                                                                                   Lib.testCorpus_f) -}
1e5d3a0b0040081cdf66dfaa4e3f26a2
  testCorpus13 :: ([GHC.Base.String], [GHC.Base.String])
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus.\} True False} (Lib.testCorpus15,
                                                                                                                                                                  Lib.testCorpus14)) -}
7f8bf2a6a8c8bf8772648e3f25f81a15
  testCorpus14 :: [GHC.Base.String]
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus.\} False True} Data.OldList.words
                                                                                                                                                                   Lib.testCorpus_e1) -}
7afae47c3f3dde56cffe4360946d43c6
  testCorpus15 :: [GHC.Base.String]
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus.\} False True} Data.OldList.words
                                                                                                                                                                   Lib.testCorpus_f1) -}
d3a271a54133195fde9972da8f431615
  testCorpus16 :: ([GHC.Base.String], [GHC.Base.String])
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus.\} True False} (Lib.testCorpus18,
                                                                                                                                                                  Lib.testCorpus17)) -}
181f629f8e14b57635abbece884e9b15
  testCorpus17 :: [GHC.Base.String]
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus.\} False True} Data.OldList.words
                                                                                                                                                                   Lib.testCorpus_e2) -}
6c5769c55ac5e01e62aa5ba47a61ebaa
  testCorpus18 :: [GHC.Base.String]
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus.\} False True} Data.OldList.words
                                                                                                                                                                   Lib.testCorpus_f2) -}
8fb0a563474fdd970fcb9c4b7b79095d
  testCorpus19 :: ([GHC.Base.String], [GHC.Base.String])
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus.\} True False} (Lib.testCorpus21,
                                                                                                                                                                  Lib.testCorpus20)) -}
955b185f2beb2889d61775cce3f75eb8
  testCorpus2 :: [([GHC.Base.String], [GHC.Base.String])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Base.String], [GHC.Base.String])
                   Lib.testCorpus31
                   Lib.testCorpus3) -}
dfb2c0450b85e2f2b8346b80c0401b85
  testCorpus20 :: [GHC.Base.String]
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus.\} False True} Data.OldList.words
                                                                                                                                                                   Lib.testCorpus_e3) -}
4dcf29effc3597ca77abb6ea8cf22dfc
  testCorpus21 :: [GHC.Base.String]
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus.\} False True} Data.OldList.words
                                                                                                                                                                   Lib.testCorpus_f3) -}
be2dac9dc925503e80f07f306f5aeb3a
  testCorpus22 :: ([GHC.Base.String], [GHC.Base.String])
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus.\} True False} (Lib.testCorpus24,
                                                                                                                                                                  Lib.testCorpus23)) -}
ed08cf1b88abf115676cf8f6bb6abe19
  testCorpus23 :: [GHC.Base.String]
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus.\} False True} Data.OldList.words
                                                                                                                                                                   Lib.testCorpus_e4) -}
f4938ba35d65564aaf7565f3205a8590
  testCorpus24 :: [GHC.Base.String]
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus.\} False True} Data.OldList.words
                                                                                                                                                                   Lib.testCorpus_f4) -}
e70b4cc8a97c3ab465f62661d8ba2a49
  testCorpus25 :: ([GHC.Base.String], [GHC.Base.String])
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus.\} True False} (Lib.testCorpus27,
                                                                                                                                                                  Lib.testCorpus26)) -}
c8a78f6ba451398863da0be0a05b66ad
  testCorpus26 :: [GHC.Base.String]
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus.\} False True} Data.OldList.words
                                                                                                                                                                   Lib.testCorpus_e5) -}
dbeb9cbf33df9cb1783c581b1f6e98b0
  testCorpus27 :: [GHC.Base.String]
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus.\} False True} Data.OldList.words
                                                                                                                                                                   Lib.testCorpus_f5) -}
67a625c5871d30e71707fba732359e6f
  testCorpus28 :: ([GHC.Base.String], [GHC.Base.String])
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus.\} True False} (Lib.testCorpus30,
                                                                                                                                                                  Lib.testCorpus29)) -}
942f4495df952dc5987081876b45a3e4
  testCorpus29 :: [GHC.Base.String]
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus.\} False True} Data.OldList.words
                                                                                                                                                                   Lib.testCorpus_e6) -}
27547e150436fb42aa2496b62ee18780
  testCorpus3 :: [([GHC.Base.String], [GHC.Base.String])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Base.String], [GHC.Base.String])
                   Lib.testCorpus28
                   Lib.testCorpus4) -}
40df5aff909123b09885b91f486dcb91
  testCorpus30 :: [GHC.Base.String]
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus.\} False True} Data.OldList.words
                                                                                                                                                                   Lib.testCorpus_f6) -}
268e98ba11655e88664c68f4241fe90a
  testCorpus31 :: ([GHC.Base.String], [GHC.Base.String])
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus.\} True False} (Lib.testCorpus33,
                                                                                                                                                                  Lib.testCorpus32)) -}
9e1bae097d07137a7b8f740e3ffe3bfb
  testCorpus32 :: [GHC.Base.String]
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus.\} False True} Data.OldList.words
                                                                                                                                                                   Lib.testCorpus_e7) -}
4998682d51d5aba8b3290cc7fb1f3e00
  testCorpus33 :: [GHC.Base.String]
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus.\} False True} Data.OldList.words
                                                                                                                                                                   Lib.testCorpus_f7) -}
2bdff312dbdba5d3d788f26d5bb27359
  testCorpus34 :: ([GHC.Base.String], [GHC.Base.String])
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus.\} True False} (Lib.testCorpus36,
                                                                                                                                                                  Lib.testCorpus35)) -}
b5230db9a144f80ff164374e214615ca
  testCorpus35 :: [GHC.Base.String]
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus.\} False True} Data.OldList.words
                                                                                                                                                                   Lib.testCorpus_e8) -}
1db7b33f8d46a042863428810d8f519b
  testCorpus36 :: [GHC.Base.String]
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus.\} False True} Data.OldList.words
                                                                                                                                                                   Lib.testCorpus_f8) -}
70d3ca67931f45ce21103dd525010095
  testCorpus37 :: ([GHC.Base.String], [GHC.Base.String])
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus.\} True False} (Lib.testCorpus39,
                                                                                                                                                                  Lib.testCorpus38)) -}
cc0232a91970c49836bfd3b0a5e36030
  testCorpus38 :: [GHC.Base.String]
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus.\} False True} Data.OldList.words
                                                                                                                                                                   Lib.testCorpus_e9) -}
299fbc7334c8650e50bd1249474568c0
  testCorpus39 :: [GHC.Base.String]
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus.\} False True} Data.OldList.words
                                                                                                                                                                   Lib.testCorpus_f9) -}
d97ea9aa70772601529a17a7ed812856
  testCorpus4 :: [([GHC.Base.String], [GHC.Base.String])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Base.String], [GHC.Base.String])
                   Lib.testCorpus25
                   Lib.testCorpus5) -}
89fc7e6a3f1c54f072722800a871118b
  testCorpus5 :: [([GHC.Base.String], [GHC.Base.String])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Base.String], [GHC.Base.String])
                   Lib.testCorpus22
                   Lib.testCorpus6) -}
31ef5743876fc559910d34af95e9937d
  testCorpus6 :: [([GHC.Base.String], [GHC.Base.String])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Base.String], [GHC.Base.String])
                   Lib.testCorpus19
                   Lib.testCorpus7) -}
e19d62516958b079ec3d7f03e05d2e65
  testCorpus7 :: [([GHC.Base.String], [GHC.Base.String])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Base.String], [GHC.Base.String])
                   Lib.testCorpus16
                   Lib.testCorpus8) -}
3abfaf673f069a73ddf2fe0572ae9161
  testCorpus8 :: [([GHC.Base.String], [GHC.Base.String])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Base.String], [GHC.Base.String])
                   Lib.testCorpus13
                   Lib.testCorpus9) -}
e7f31b42e36def0116998a559b7765ba
  testCorpus9 :: [([GHC.Base.String], [GHC.Base.String])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ ([GHC.Base.String], [GHC.Base.String])
                   Lib.testCorpus10
                   (GHC.Types.[] @ ([GHC.Base.String], [GHC.Base.String]))) -}
987843cb3eed9b69c381d024ed882104
  testCorpus_e :: GHC.Base.String
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} GHC.CString.unpackCStringUtf8#
                                                                                                                                                                 "To v\\196\\155\\197\\153\\195\\173m , \\197\\190e nechce\\197\\161"#) -}
0928cd66db7535f4fdee8507c0ca7fbe
  testCorpus_e1 :: GHC.Base.String
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} GHC.CString.unpackCStringUtf8#
                                                                                                                                                                 "J\\195\\161 o tom nechci mluvit"#) -}
1a95c4a796890d45c19a1a19b72931a8
  testCorpus_e2 :: GHC.Base.String
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} GHC.CString.unpackCStringUtf8#
                                                                                                                                                                 "Nem\\195\\161 m\\195\\173t n\\195\\161hodou z\\195\\173tra narozeniny"#) -}
35772f758e881815c5d36137e98031ff
  testCorpus_e3 :: GHC.Base.String
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} GHC.CString.unpackCStringUtf8#
                                                                                                                                                                 "Kdypak se tady ten hajzl\\195\\173k objev\\195\\173 , co"#) -}
1f805dfdf0471bab07a2acd1db2b0d0e
  testCorpus_e4 :: GHC.Base.String
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} GHC.CString.unpackCStringUtf8#
                                                                                                                                                                 "S n\\195\\173m , ne s t\\195\\173m S n\\195\\173m jsi vyrukovala"#) -}
952304835fcf3e9f67dc03e2d967a35a
  testCorpus_e5 :: GHC.Base.String
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} GHC.CString.unpackCStringUtf8#
                                                                                                                                                                 "Mrz\\195\\173 m\\196\\155 , \\197\\190e jsem s t\\195\\173m vyrukovala"#) -}
cbe04a313fd613a0ba8388265238a57c
  testCorpus_e6 :: GHC.Base.String
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} GHC.CString.unpackCStringUtf8#
                                                                                                                                                                 "Pov\\195\\173d\\195\\161m , dej s t\\195\\173m pokoj"#) -}
ccd844b9647441e22be27e005f9bf88a
  testCorpus_e7 :: GHC.Base.String
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} GHC.CString.unpackCStringUtf8#
                                                                                                                                                                 "Kdypak p\\197\\153ijde"#) -}
3ebb55f676fb0086b7358a7ad1b6f2a5
  testCorpus_e8 :: GHC.Base.String
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} GHC.CString.unpackCStringUtf8#
                                                                                                                                                                 "Ty jsi s t\\195\\173m vyrukovala"#) -}
57afdaf8d11c249675fc3d7d8024abbc
  testCorpus_e9 :: GHC.Base.String
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} GHC.CString.unpackCStringUtf8#
                                                                                                                                                                 "Ne ne j\\195\\161 bych to cht\\196\\155l v\\196\\155d\\196\\155t"#) -}
21ed54edff88e531511365a9ab6031ae
  testCorpus_f :: GHC.Base.String
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} GHC.CString.unpackCStringUtf8#
                                                                                                                                                                 "Ona nie chce o tym m\\195\\179wi\\196\\135 , o nim"#) -}
21f144970055b1bedd8adf3fbae052d3
  testCorpus_f1 :: GHC.Base.String
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} GHC.CString.unpackCStringUtf8#
                                                                                                                                                                 "Nie chc\\196\\153 o tym m\\195\\179wi\\196\\135"#) -}
104d7a1f3c9de9cee5d573a59ad51130
  testCorpus_f2 :: GHC.Base.String
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} GHC.CString.unpackCStringUtf8#
                                                                                                                                                                 "Czy jutro nie s\\196\\133 jego urodziny"#) -}
af3802f975a874eb2a9914aefc5f6f98
  testCorpus_f3 :: GHC.Base.String
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} GHC.CString.unpackCStringUtf8#
                                                                                                                                                                 "Kiedy przyjdzie ma\\197\\130y gn\\195\\179j"#) -}
e9e504486879f78c15d22411f86f6e9f
  testCorpus_f4 :: GHC.Base.String
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} GHC.CString.unpackCStringUtf8#
                                                                                                                                                                 "Ty go wychowa\\197\\130a\\197\\155 , mniej lub bardziej"#) -}
f79c2bbe9d09db8b5706ac26056e412e
  testCorpus_f5 :: GHC.Base.String
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} GHC.CString.unpackCStringUtf8#
                                                                                                                                                                 "Przepraszam , \\197\\188e z tym zacz\\196\\153\\197\\130am Z nim Nie z tym"#) -}
86367b48f74d46e356297b3652952c50
  testCorpus_f6 :: GHC.Base.String
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} GHC.CString.unpackCStringUtf8#
                                                                                                                                                                 "Powiedzia\\197\\130am niewa\\197\\188ne"#) -}
860b38816f7e1c5ebfb4d53c09f6d644
  testCorpus_f7 :: GHC.Base.String
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} GHC.CString.unpackCString#
                                                                                                                                                                 "Kiedy przyjdzie do domu"#) -}
406c80c8e847f30f830432d8514f739e
  testCorpus_f8 :: GHC.Base.String
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} GHC.CString.unpackCStringUtf8#
                                                                                                                                                                 "Ty zacz\\196\\153\\197\\130a\\197\\155"#) -}
aec8fd99d1fa7a3e7c940a9f0c7f2563
  testCorpus_f9 :: GHC.Base.String
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} {__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testCorpus} False True} GHC.CString.unpackCStringUtf8#
                                                                                                                                                                 "Chc\\196\\153 wiedzie\\196\\135"#) -}
51a624635f8329721ada25b26612c905
  testProbs :: Lib.Probs
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testProbs} True True} Lib.initProbs
                                                                                        Lib.testCorpus) -}
7414ddfe5038addcd3b16fe5b8eece71
  testloop :: [Lib.Probs -> Lib.Probs]
  {- Unfolding: ({__scc {IBM1-0.1.0.0-2Cy7pYQHi2RT2Zw6i7w81:Lib.testloop} True True} Lib.loop
                                                                                       Lib.testCorpus) -}
"SPEC/Lib $fEq(,) @ Token @ Token" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                              Lib.Token)
                                                   ($dEq1 :: GHC.Classes.Eq Lib.Token)
  GHC.Classes.$fEq(,) @ [GHC.Types.Char]
                      @ [GHC.Types.Char]
                      $dEq
                      $dEq1
  = Lib.$s!_$s$fEq(,)
"SPEC/Lib $fHashable(,) @ Token @ Token" [ALWAYS] forall ($dHashable :: Data.Hashable.Class.Hashable
                                                                          Lib.Token)
                                                         ($dHashable1 :: Data.Hashable.Class.Hashable
                                                                           Lib.Token)
  Data.Hashable.Class.$fHashable(,) @ [GHC.Types.Char]
                                    @ [GHC.Types.Char]
                                    $dHashable
                                    $dHashable1
  = Lib.$s!_$s$fHashable(,)
"SPEC/Lib $fHashable(,)_$chash @ Token @ Token" [ALWAYS] forall ($dHashable :: Data.Hashable.Class.Hashable
                                                                                 Lib.Token)
                                                                ($dHashable1 :: Data.Hashable.Class.Hashable
                                                                                  Lib.Token)
  Data.Hashable.Class.$fHashable(,)_$chash @ [GHC.Types.Char]
                                           @ [GHC.Types.Char]
                                           $dHashable
                                           $dHashable1
  = Lib.$s!_$s$fHashable(,)_$chash
"SPEC/Lib $fHashable(,)_$chashWithSalt @ Token @ Token" [ALWAYS] forall ($dHashable :: Data.Hashable.Class.Hashable
                                                                                         Lib.Token)
                                                                        ($dHashable1 :: Data.Hashable.Class.Hashable
                                                                                          Lib.Token)
  Data.Hashable.Class.$fHashable(,)_$chashWithSalt @ [GHC.Types.Char]
                                                   @ [GHC.Types.Char]
                                                   $dHashable
                                                   $dHashable1
  = Lib.$s!_$s$fHashable(,)_$chashWithSalt
"SPEC/Lib $wupdateOrSnocWithKey @ [Char] _" [0] forall @ v
                                                       (w :: GHC.Classes.Eq [GHC.Types.Char])
  Data.HashMap.Strict.$wupdateOrSnocWithKey @ [GHC.Types.Char] @ v w
  = Lib.$s$wupdateOrSnocWithKey @ v
"SPEC/Lib insertWith @ [Char] _" [ALWAYS] forall @ v
                                                 ($dEq :: GHC.Classes.Eq [GHC.Types.Char])
                                                 ($dHashable :: Data.Hashable.Class.Hashable
                                                                  [GHC.Types.Char])
  Data.HashMap.Strict.insertWith @ [GHC.Types.Char]
                                 @ v
                                 $dEq
                                 $dHashable
  = Lib.$sinsertWith @ v
"SPEC/Lib lookup @ [Char] _" [ALWAYS] forall @ v
                                             ($dEq :: GHC.Classes.Eq [GHC.Types.Char])
                                             ($dHashable :: Data.Hashable.Class.Hashable
                                                              [GHC.Types.Char])
  Data.HashMap.Base.lookup @ [GHC.Types.Char] @ v $dEq $dHashable
  = Lib.$s!_$slookup @ v
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

